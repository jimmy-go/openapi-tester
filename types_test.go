package openapitester

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"
)

const (
	swaggerURL = "http://petstore.swagger.io/v2/swagger.json"
	expBody    = `{"host":"petstore.swagger.io","paths":{"/pet":{"post":{"tags":["pet"],"summary":"Add a new pet to the store","description":"","consumes":["application/json","application/xml"],"parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":"#/definitions/Pet"}}],"responses":{"405":{"description":"Invalid input"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]},"put":{"tags":["pet"],"summary":"Update an existing pet","description":"","consumes":["application/json","application/xml"],"parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":"#/definitions/Pet"}}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"},"405":{"description":"Validation exception"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/findByStatus":{"get":{"tags":["pet"],"summary":"Finds Pets by status","description":"Multiple status values can be provided with comma separated strings","parameters":[{"name":"status","in":"query","required":true,"type":"array"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":""}},"400":{"description":"Invalid status value"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/findByTags":{"get":{"tags":["pet"],"summary":"Finds Pets by tags","description":"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.","parameters":[{"name":"tags","in":"query","required":true,"type":"array"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":""}},"400":{"description":"Invalid tag value"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/{petId}":{"delete":{"tags":["pet"],"summary":"Deletes a pet","description":"","parameters":[{"name":"api_key","in":"header","required":false,"type":"string"},{"name":"petId","in":"path","required":true,"type":"integer"}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]},"get":{"tags":["pet"],"summary":"Find pet by ID","description":"Returns a single pet","parameters":[{"name":"petId","in":"path","required":true,"type":"integer"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Pet"}},"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"}},"security":[{"api_key":[]}]},"post":{"tags":["pet"],"summary":"Updates a pet in the store with form data","description":"","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"petId","in":"path","required":true,"type":"integer"},{"name":"name","in":"formData","required":false,"type":"string"},{"name":"status","in":"formData","required":false,"type":"string"}],"responses":{"405":{"description":"Invalid input"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/{petId}/uploadImage":{"post":{"tags":["pet"],"summary":"uploads an image","description":"","consumes":["multipart/form-data"],"parameters":[{"name":"petId","in":"path","required":true,"type":"integer"},{"name":"additionalMetadata","in":"formData","required":false,"type":"string"},{"name":"file","in":"formData","required":false,"type":"file"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/ApiResponse"}}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/store/inventory":{"get":{"tags":["store"],"summary":"Returns pet inventories by status","description":"Returns a map of status codes to quantities","parameters":[],"responses":{"200":{"description":"successful operation","schema":{"$ref":""}}},"security":[{"api_key":[]}]}},"/store/order":{"post":{"tags":["store"],"summary":"Place an order for a pet","description":"","parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":"#/definitions/Order"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Order"}},"400":{"description":"Invalid Order"}}}},"/store/order/{orderId}":{"delete":{"tags":["store"],"summary":"Delete purchase order by ID","description":"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors","parameters":[{"name":"orderId","in":"path","required":true,"type":"integer"}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Order not found"}}},"get":{"tags":["store"],"summary":"Find purchase order by ID","description":"For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other values will generated exceptions","parameters":[{"name":"orderId","in":"path","required":true,"type":"integer"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Order"}},"400":{"description":"Invalid ID supplied"},"404":{"description":"Order not found"}}}},"/user":{"post":{"tags":["user"],"summary":"Create user","description":"This can only be done by the logged in user.","parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":"#/definitions/User"}}],"responses":{"default":{"description":"successful operation"}}}},"/user/createWithArray":{"post":{"tags":["user"],"summary":"Creates list of users with given input array","description":"","parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":""}}],"responses":{"default":{"description":"successful operation"}}}},"/user/createWithList":{"post":{"tags":["user"],"summary":"Creates list of users with given input array","description":"","parameters":[{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":""}}],"responses":{"default":{"description":"successful operation"}}}},"/user/login":{"get":{"tags":["user"],"summary":"Logs user into the system","description":"","parameters":[{"name":"username","in":"query","required":true,"type":"string"},{"name":"password","in":"query","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":""}},"400":{"description":"Invalid username/password supplied"}}}},"/user/logout":{"get":{"tags":["user"],"summary":"Logs out current logged in user session","description":"","parameters":[],"responses":{"default":{"description":"successful operation"}}}},"/user/{username}":{"delete":{"tags":["user"],"summary":"Delete user","description":"This can only be done by the logged in user.","parameters":[{"name":"username","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid username supplied"},"404":{"description":"User not found"}}},"get":{"tags":["user"],"summary":"Get user by user name","description":"","parameters":[{"name":"username","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/User"}},"400":{"description":"Invalid username supplied"},"404":{"description":"User not found"}}},"put":{"tags":["user"],"summary":"Updated user","description":"This can only be done by the logged in user.","parameters":[{"name":"username","in":"path","required":true,"type":"string"},{"name":"body","in":"body","required":true,"type":"","schema":{"$ref":"#/definitions/User"}}],"responses":{"400":{"description":"Invalid user supplied"},"404":{"description":"User not found"}}}}},"definitions":{"ApiResponse":{"type":"object","properties":{"code":{"type":"integer"},"message":{"type":"string"},"type":{"type":"string"}},"example":""},"Category":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"example":""},"Order":{"type":"object","properties":{"complete":{"type":"boolean"},"id":{"type":"integer"},"petId":{"type":"integer"},"quantity":{"type":"integer"},"shipDate":{"type":"string"},"status":{"type":"string"}},"example":""},"Pet":{"type":"object","properties":{"category":{"type":""},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array"},"status":{"type":"string"},"tags":{"type":"array"}},"example":""},"Tag":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"example":""},"User":{"type":"object","properties":{"email":{"type":"string"},"firstName":{"type":"string"},"id":{"type":"integer"},"lastName":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"userStatus":{"type":"integer"},"username":{"type":"string"}},"example":""}}}`
)

func TestTypes(t *testing.T) {
	resp, err := http.Get(swaggerURL)
	assert.Nil(t, err)
	b, err := ioutil.ReadAll(resp.Body)
	assert.Nil(t, err)

	var v *API
	err = json.Unmarshal(b, &v)
	assert.Nil(t, err)

	b2, err := json.Marshal(v)
	actual := string(b2)
	assert.Nil(t, err)
	assert.EqualValues(t, expBody, actual, actual)
}
